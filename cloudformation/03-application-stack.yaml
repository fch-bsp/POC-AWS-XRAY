AWSTemplateFormatVersion: '2010-09-09'
Description: 'POC X-Ray - Application Stack (ECS, ALB)'

Parameters:
  ProjectName:
    Type: String
    Default: xray-poc
    Description: Nome do projeto para tags

  NetworkStackName:
    Type: String
    Default: xray-poc-network
    Description: Nome da stack de rede

  DatabaseStackName:
    Type: String
    Default: xray-poc-database
    Description: Nome da stack de banco

  BackendImageURI:
    Type: String
    Description: URI da imagem Docker do backend no ECR

  FrontendImageURI:
    Type: String
    Description: URI da imagem Docker do frontend no ECR

Resources:
  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-alb
      Scheme: internet-facing
      Type: application
      Subnets: !Split
        - ','
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnets
      SecurityGroups:
        - Fn::ImportValue: !Sub ${NetworkStackName}-ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-alb

  # Target Groups
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-frontend-tg
      Port: 3000
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VPC
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-backend-tg
      Port: 8080
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VPC
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # ALB Listeners
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ALB Listener Rules
  BackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '/api/*'
      ListenerArn: !Ref ALBListener
      Priority: 100

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # IAM Roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: XRayAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: '*'

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: XRayAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                Resource: '*'

  # CloudWatch Log Groups
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-backend
      RetentionInDays: 7

  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-frontend
      RetentionInDays: 7

  XRayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-xray
      RetentionInDays: 7

  # ECS Task Definitions
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-backend
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: backend
          Image: !Ref BackendImageURI
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: '8080'
            - Name: DB_HOST
              Value:
                Fn::ImportValue: !Sub ${DatabaseStackName}-DatabaseEndpoint
            - Name: DB_PORT
              Value:
                Fn::ImportValue: !Sub ${DatabaseStackName}-DatabasePort
            - Name: DB_NAME
              Value:
                Fn::ImportValue: !Sub ${DatabaseStackName}-DatabaseName
            - Name: DB_USER
              Value: postgres
            - Name: DB_PASSWORD
              Value: postgres123
            - Name: AWS_XRAY_TRACING_NAME
              Value: XRayPOC-Backend
            - Name: AWS_XRAY_CONTEXT_MISSING
              Value: LOG_ERROR
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BackendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Essential: true
        - Name: xray-daemon
          Image: amazon/aws-xray-daemon:latest
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref XRayLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: xray-backend
          Essential: false

  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-frontend
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: frontend
          Image: !Ref FrontendImageURI
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: '3000'
            - Name: API_BASE_URL
              Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
            - Name: AWS_XRAY_TRACING_NAME
              Value: XRayPOC-Frontend
            - Name: AWS_XRAY_CONTEXT_MISSING
              Value: LOG_ERROR
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FrontendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Essential: true
        - Name: xray-daemon
          Image: amazon/aws-xray-daemon:latest
          PortMappings:
            - ContainerPort: 2000
              Protocol: udp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref XRayLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: xray-frontend
          Essential: false

  # ECS Services
  BackendService:
    Type: AWS::ECS::Service
    DependsOn: BackendListenerRule
    Properties:
      ServiceName: !Sub ${ProjectName}-backend
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref BackendTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub ${NetworkStackName}-ECSSecurityGroup
          Subnets: !Split
            - ','
            - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnets
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 8080
          TargetGroupArn: !Ref BackendTargetGroup
      HealthCheckGracePeriodSeconds: 300

  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub ${ProjectName}-frontend
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref FrontendTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 2
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub ${NetworkStackName}-ECSSecurityGroup
          Subnets: !Split
            - ','
            - Fn::ImportValue: !Sub ${NetworkStackName}-PrivateSubnets
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 3000
          TargetGroupArn: !Ref FrontendTargetGroup
      HealthCheckGracePeriodSeconds: 300

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerDNS

  LoadBalancerURL:
    Description: URL of the application
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
